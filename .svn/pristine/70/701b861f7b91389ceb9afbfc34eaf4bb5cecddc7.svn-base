using UnityEngine;

public static class GameTools
{
    public struct Range
    {
        public float min;
        public float max;

        public Range(float min, float max)
        {
            this.min = min;
            this.max = min > max ? min : max;
        }

        public float Length()
        {
            return max - min;
        }
    }

    public static bool IsInRange(in Vector3 source, in Vector3 target, in float range)
    {
        var sqrDistance = (source - target).sqrMagnitude;
        return sqrDistance <= range * range;
    }

    public static bool IsInRange(in Vector3 source, in Vector3 target, in float range, out float sqrDistance)
    {
        sqrDistance = (source - target).sqrMagnitude;
        return sqrDistance <= range * range;
    }

    public static Vector3 GetOffsetPosition(in Vector3 sourcePosition, in Vector3 targetPosition, in float offset)
    {
        var pos = targetPosition - sourcePosition;
        return sourcePosition + pos.normalized * (pos.magnitude - offset);
    }

    public static Quaternion LookAtTarget(in Vector3 sourcePosition, in Vector3 targetPosition)
    {
        var direction = Vector3.Scale(sourcePosition - targetPosition, new Vector3(1, 0, 1));

        return Quaternion.LookRotation(direction, Vector3.up);
    }

    public static int GetLayerIndexFromLayerMask(LayerMask layerMask)
    {
        var layerMaskValue = layerMask.value;
        var layerLog = layerMaskValue <= 0 ? 0 : Mathf.Log(layerMaskValue, 2);
        var layerLogInt = (int) layerLog;
        var layerLogMod = layerLogInt > 0 ? (int) (layerLog % layerLogInt) : 0;
        var layerIndex = layerLogMod == 0 ? layerLogInt : 0;

        return layerIndex;
    }

    // public sealed class GameEntityColliderView : MonoBehaviour
    // {
    //     public MonoBehAdv monoBehAdvLink;
    //
    //     private void Awake()
    //     {
    //         CreateLink();
    //     }
    //
    //     private void CreateLink()
    //     {
    //         if (monoBehAdvLink) return;
    //         monoBehAdvLink = GetComponent<MonoBehAdv>();
    //         if (monoBehAdvLink) return;
    //         monoBehAdvLink = GetComponentInParent<MonoBehAdv>();
    //     }
    // }
}