using System.Collections.Generic;
using System.Linq;
using Adapters;
using Entitas;

namespace Core.Analytics
{
    public sealed class GameLevelFinishWithWinReactSystem : ReactiveSystem<StateEntity>
    {
        private readonly AnalyticContext _analyticContext;
        private readonly IGroup<GameEntity> _playerGameDataGroup;

        public GameLevelFinishWithWinReactSystem(AnalyticContext analyticContext, GameContext gameContext, StateContext stateContext) : base(stateContext)
        {
            _analyticContext = analyticContext;
            _playerGameDataGroup = gameContext.GetGroup(GameMatcher.AnyOf(GameMatcher.CurrentPlayerData,
                GameMatcher.PlayerCurrentGameLevel,
                GameMatcher.PlayerGameLevelCount,
                GameMatcher.PlayerGameLevelProgress,
                GameMatcher.PlayerGameLevelPlayTime));
        }

        protected override ICollector<StateEntity> GetTrigger(IContext<StateEntity> context)
        {
            return context.CreateCollector(StateMatcher.Victory.Added());
        }

        protected override bool Filter(StateEntity entity)
        {
            return true;
        }

        protected override void Execute(List<StateEntity> entities)
        {
            if (GetPlayerDataEntity(out var playerDataEntity) == false) return;
            
            // get dummy data (replace parameters to REAL DATA)
            var dummyParameters = new AnalyticsConfig.EventGameLevelParameters().Dummy();
            var gameLevelNumber = playerDataEntity.playerCurrentGameLevel.value; // (int) dummyParameters.ElementAt(0).Value;
            var gameLevelName = (string) dummyParameters.ElementAt(1).Value;
            var gameLevelCount = playerDataEntity.playerGameLevelCount.value; // (int) dummyParameters.ElementAt(2).Value;
            var gameLevelDiff = (string) dummyParameters.ElementAt(3).Value;
            var gameLevelLoop = playerDataEntity.playerGameLevelLoop.value;
            var gameLevelRandom = (bool) dummyParameters.ElementAt(5).Value;
            var gameLevelType = (string) dummyParameters.ElementAt(6).Value;
            var gameLevelMode = (string) dummyParameters.ElementAt(7).Value;

            var gameLevelResult = "win";
            var gameLevelTime = playerDataEntity.playerGameLevelPlayTime.value; // (int) dummyParameters.ElementAt(9).Value;
            var gameLevelProgress = (int)(playerDataEntity.playerGameLevelProgress.value * 100);// (int) dummyParameters.ElementAt(10).Value;
            var gameLevelContinueForAd = (int) dummyParameters.ElementAt(11).Value;
            
            // create request to send event
            var analyticEntity = _analyticContext.CreateEntity();
            analyticEntity.isGameLevelFinish = true;
            analyticEntity.AddGameLevelNumber(gameLevelNumber);
            analyticEntity.AddGameLevelName(gameLevelName);
            analyticEntity.AddGameLevelCount(gameLevelCount);
            analyticEntity.AddGameLevelDiff(gameLevelDiff);
            analyticEntity.AddGameLevelLoop(gameLevelLoop);
            analyticEntity.AddGameLevelRandom(gameLevelRandom);
            analyticEntity.AddGameLevelType(gameLevelType);
            analyticEntity.AddGameLevelMode(gameLevelMode);
            
            analyticEntity.AddGameLevelResult(gameLevelResult);
            analyticEntity.AddGameLevelTime(gameLevelTime);
            analyticEntity.AddGameLevelProgress(gameLevelProgress);
            analyticEntity.AddGameLevelContinueForAd(gameLevelContinueForAd);
            
            bool GetPlayerDataEntity(out GameEntity playerEntity)
            {
                foreach (var gameEntity in _playerGameDataGroup.GetEntities())
                {
                    playerEntity = gameEntity;
                    return true;
                }

                playerEntity = null;
                return false;
            }
        }
    }
}