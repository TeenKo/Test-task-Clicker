using System.Collections.Generic;
using Entitas;
using UnityEngine;

namespace Core.Input
{
    public sealed class JoystickTouchMovedReactSystem : ReactiveSystem<InputEntity>
    {
        private readonly GameContext _gameContext;

        public JoystickTouchMovedReactSystem(InputContext inputContext, GameContext gameContext) : base(inputContext)
        {
            _gameContext = gameContext;
        }

        protected override ICollector<InputEntity> GetTrigger(IContext<InputEntity> context)
        {
            return context.CreateCollector(InputMatcher.TouchMovePosition);
        }

        protected override bool Filter(InputEntity entity)
        {
            return entity.hasTouchPhase &&
                   entity.touchPhase.value == TouchPhase.Moved;
        }

        protected override void Execute(List<InputEntity> entities)
        {
            foreach (var inputEntity in entities)
            {
                var inputPosition = inputEntity.touchMovePosition.value;
                var gamePadEntity = _gameContext.joystickEntity;
                
                if (gamePadEntity.isJoystickActive == false) continue;
                
                var background = gamePadEntity.joystickBackground.value;
                var scaleFactor = gamePadEntity.joystickCanvas.value.scaleFactor;
                var axisOptions = gamePadEntity.joystickAxisOptions.value;
                var handleRange = gamePadEntity.joystickHandleRange.value;
                var deadZone = gamePadEntity.joystickDeadZone.value;
                var camera = gamePadEntity.joystickCamera.value;

                var position = RectTransformUtility.WorldToScreenPoint(camera, background.position);
                var radius = background.sizeDelta / 2;
                var input = (inputPosition - position) / (radius * scaleFactor);
                JoystickTools.FormatInput(axisOptions, ref input);
                JoystickTools.HandleInput(input.magnitude, input.normalized, deadZone, ref input);
                var anchoredPosition = input * radius * handleRange;

                gamePadEntity.ReplaceJoystickInput(input);
                gamePadEntity.ReplaceJoystickHandleAnchoredPosition(anchoredPosition);
                break;
            }
        }
    }
}