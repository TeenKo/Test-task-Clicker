#if AppMetrica && UNITY_EDITOR

namespace Adapters.AppMetricaAnalytics
{
    public sealed class AppMetrica
    {
        private bool _actualPauseStatus = false;

        private readonly IYandexAppMetrica _metrica = null;

        private readonly object _syncRoot = new object();

        public AppMetricaService()
        {
            var config = RootConfig.Instance.servicesSettings.appMetricaSettings;

            if (config.ExceptionsReporting)
            {
                Application.logMessageReceived += HandleLog;
            }

            lock (_syncRoot)
            {
                _metrica ??= new YandexAppMetricaDummy();
            }

            var configuration = new YandexAppMetricaConfig(config.ApiKey)
            {
                SessionTimeout = (int) config.SessionTimeoutSec,
                Logs = config.Logs,
                HandleFirstActivationAsUpdate = config.HandleFirstActivationAsUpdate,
                StatisticsSending = config.StatisticsSending,
                LocationTracking = false,
            };

            _metrica.ActivateWithConfiguration(configuration);
        }

        public void Initialize()
        {
            _metrica.ResumeSession();
        }

        public void OnApplicationPause(bool pauseStatus)
        {
            if (_actualPauseStatus == pauseStatus) return;

            _actualPauseStatus = pauseStatus;
            if (pauseStatus)
            {
                _metrica.PauseSession();
            }
            else
            {
                _metrica.ResumeSession();
            }
        }

        public void EventLevelStart(EventLevelStartParameters start)
        {
            _metrica.ReportEvent("level_start", start.Parameters);
            SendEventsBuffer();
        }

        public void EventLevelFinish(EventLevelFinishParameters finish)
        {
            _metrica.ReportEvent("level_finish", finish.Parameters);
            SendEventsBuffer();
        }

        private void SendEventsBuffer()
        {
            _metrica.SendEventsBuffer();
        }

        private void HandleLog(string condition, string stackTrace, LogType type)
        {
            if (type == LogType.Exception)
            {
                _metrica.ReportError(condition, condition, stackTrace);
            }
        }
    }
}

#endif