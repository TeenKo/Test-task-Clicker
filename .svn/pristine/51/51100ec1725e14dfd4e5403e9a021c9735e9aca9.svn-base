using System;
using System.Linq;
using UnityEngine;

public static class GameTools
{
    [Serializable]
    public struct Range
    {
        public float min;
        public float max;

        public Range(float min, float max)
        {
            this.min = min;
            this.max = min > max ? min : max;
        }

        public float Length()
        {
            return max - min;
        }
    }

    public static bool IsInRange(in Vector3 source, in Vector3 target, in float range)
    {
        var sqrDistance = (source - target).sqrMagnitude;
        return sqrDistance <= range * range;
    }

    public static bool IsInRange(in Vector3 source, in Vector3 target, in float range, out float sqrDistance)
    {
        sqrDistance = (source - target).sqrMagnitude;
        return sqrDistance <= range * range;
    }

    public static Vector3 GetOffsetPosition(in Vector3 sourcePosition, in Vector3 targetPosition, in float offset)
    {
        var pos = targetPosition - sourcePosition;
        return sourcePosition + pos.normalized * (pos.magnitude - offset);
    }

    public static Quaternion LookAtTarget(in Vector3 sourcePosition, in Vector3 targetPosition)
    {
        var direction = Vector3.Scale(sourcePosition - targetPosition, new Vector3(1, 0, 1));

        return Quaternion.LookRotation(direction, Vector3.up);
    }

    public static int GetLayerIndexFromLayerMask(LayerMask layerMask)
    {
        var layerMaskValue = layerMask.value;
        var layerLog = layerMaskValue <= 0 ? 0 : Mathf.Log(layerMaskValue, 2);
        var layerLogInt = (int) layerLog;
        var layerLogMod = layerLogInt > 0 ? (int) (layerLog % layerLogInt) : 0;
        var layerIndex = layerLogMod == 0 ? layerLogInt : 0;

        return layerIndex;
    }

    public static int GetMinIndexOfEnum<T>()
    {
        return Enum.GetValues(typeof(T)).Cast<int>().Min();
    }

    public static int GetMaxIndexOfEnum<T>()
    {
        return Enum.GetValues(typeof(T)).Cast<int>().Max();
    }

    public static Vector3 QuadraticBezierCurvePoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
    {
        t = Mathf.Clamp01(t);
        // B(t) = (1 - t)^2 * P0 + 2 * (1 - t) * t * P1 + t^2 * P2
        var oneMinusT = 1 - t;
        var doubleT = t * t;
        return oneMinusT * oneMinusT * p0 + 2 * oneMinusT * t * p1 + doubleT * p2;
    }

    public static void QuadraticBezierCurve(in Vector3 p0, in Vector3 p1, in Vector3 p2, int numPoints,
        out Vector3[] points)
    {
        numPoints = Mathf.Max(4, numPoints);
        points = new Vector3[numPoints + 1];
        for (var i = 0; i <= numPoints; i++)
        {
            var t = (float) i / numPoints;
            points[i] = QuadraticBezierCurvePoint(p0, p1, p2, t);
        }
    }
}