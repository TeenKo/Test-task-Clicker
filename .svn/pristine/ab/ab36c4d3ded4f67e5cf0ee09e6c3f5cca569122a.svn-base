using Entitas;

namespace Core
{
    public sealed class GameCoreSystems : Systems
    {
        public GameCoreSystems(Contexts contexts)
        {
            var gameConfig = Configs.ConfigsCatalogsManager.GetConfig<GameConfig>();
            var debugLogConfig = Configs.ConfigsCatalogsManager.GetConfig<DebugLogConfig>();

            #region Services

            Add(new InAppPurchases.InAppPurchaseSystems(contexts.advertisement, contexts.inAppPurchase));
            Add(new Advertisement.AdvertisementsSystems(contexts.advertisement, contexts.game));
            Add(new Analytics.AnalyticSystems(contexts.analytic, contexts.game, contexts.state));

            #endregion

            Add(new DeveloperMode.EditorInputSystem(contexts));

            #region Core systems

            Add(new DataStorage.DataStorageGroupSystems(contexts.game, debugLogConfig));
            Add(new Input.InputGroupSystems(contexts));
            // Add(new Audio.AudioSystems(contexts));

            Add(new ApplicationStart.ApplicationStartSystems(contexts.game, contexts.state, contexts.ui));
            Add(new PlayerData.PlayerDataSystems(contexts.game, contexts.state));

            Add(new ApplicationStates.ApplicationStateTransitionSystems(contexts.game, contexts.level, contexts.state));

            Add(new GameLevels.GameLevelsSystems(contexts.game, contexts.level));

            #endregion

            Add(new GameSystems(contexts, gameConfig)); // <<< add all you game system inside this systems

            #region Event and cleanup systems (comment/uncomment to on/off each system)

            Add(new AdvertisementEventSystems(contexts));
            Add(new AdvertisementCleanupSystems(contexts));

            Add(new AnalyticEventSystems(contexts));
            Add(new AnalyticCleanupSystems(contexts));

            Add(new InAppPurchaseEventSystems(contexts));
            // Add(new InAppPurchaseCleanupSystems(contexts));

            Add(new GameEventSystems(contexts));
            Add(new GameCleanupSystems(contexts));

            Add(new InputCleanupSystems(contexts));
            Add(new InputEventSystems(contexts));

            Add(new StateEventSystems(contexts));
            Add(new StateCleanupSystems(contexts));

            #endregion
        }
    }
}