using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace EditorWindowedFunctions
{
    public sealed class Colorant : EditorWindow
    {
        [MenuItem("Tools/Editor/Colorant")]
        private static void ShowWindow()
        {
            var window = GetWindow<Colorant>();
            window.titleContent = new GUIContent("Colorant");
            window.Show();

            var currentResolution = Screen.currentResolution;
            var size = Vector2.one * 512;
            var position = (new Vector2(currentResolution.width, currentResolution.height) - size) / 2;
            window.position = new Rect(position, size);

            ParseInputStringToColors();
        }

        private const string DirectoryName = "Assets/Colorant";
        private static string _input = "f94144-f3722c-f8961e-f9844a-f9c74f-90be6d-43aa8b-4d908e-577590-277da1";
        private const string Pattern = @"([A-F]|[0-9]){6}";
        private const RegexOptions Options = RegexOptions.IgnoreCase;

        private static Color[] _parseColors;

        private void OnGUI()
        {
            // if (GUILayout.Button("Create folder structure"))
            // {
            //     if (!Directory.Exists(DirectoryName)) Directory.CreateDirectory(DirectoryName);
            //     
            //     AssetDatabase.Refresh();
            // }

            _input = EditorGUILayout.TextField(_input);
            if (string.IsNullOrEmpty(_input) == false && GUILayout.Button("Create colors"))
                ParseInputStringToColors();
            
            DrawParsedColors();

            if (GUILayout.Button("Reset"))
            {
                _parseColors = null;
            }
        }

        private static void ParseInputStringToColors()
        {
            var matchCollection = Regex.Matches(_input, Pattern, Options);
            _parseColors = new Color[matchCollection.Count];
            var index = 0;
            foreach (Match match in matchCollection)
            {
                if (ColorUtility.TryParseHtmlString($"#{match.Value}", out var color))
                {
                    _parseColors[index++] = color;
                }
                else
                {
                    Debug.Log($"<color=#F94144>Value {match.Value} cannot be parsed to color!</color>");
                }
            }
        }

        private static void DrawParsedColors()
        {
            if (_parseColors == null || _parseColors.Length <= 0) return;

            foreach (var color in _parseColors)
            {
                using (new GUILayout.HorizontalScope())
                {
                    EditorGUILayout.ColorField(color);
                    EditorGUILayout.LabelField(ColorUtility.ToHtmlStringRGB(color));
                }
            }
        }
    }
}